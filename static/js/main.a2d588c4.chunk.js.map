{"version":3,"sources":["components/header/index.js","components/Wrapper/index.js","components/Heroes/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","children","score","highScore","Wrapper","Heroes","onClick","handleClick","id","alt","name","src","image","App","state","Data","_this","find","hero","i","count","setState","console","log","this","sort","Math","random","gameOver","forEach","alert","concat","_this2","header","components_Wrapper","map","components_Heroes","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"whCAYeA,SAVA,SAAAC,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAAf,uBAEEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASJ,EAAMK,UAC9BJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UACUJ,EAAMM,MADhB,iBACqCN,EAAMO,2BCAhCC,MAJf,SAAiBR,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,WCe1BI,MAjBf,SAAgBT,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OACEO,QAAS,kBAAMV,EAAMW,YAAYX,EAAMY,KACvCC,IAAKb,EAAMc,KACXC,IAAKf,EAAMgB,SAGff,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,cAASH,EAAMc,SCkERG,6MAvEbC,MAAQ,CACNC,OACAb,MAAO,EACPC,UAAW,KAEbI,YAAc,SAAAC,GACZQ,EAAKF,MAAMC,KAAKE,KAAK,SAACC,EAAMC,GAC1B,GAAID,EAAKV,KAAOA,EAAI,CAClB,GAAsB,IAAlBO,EAAKI,GAAGC,MAWV,OAVAL,EAAKI,GAAGC,OAAS,EACjBJ,EAAKK,SACH,CACEnB,MAAOc,EAAKF,MAAMZ,MAAQ,GAE5B,WACEoB,QAAQC,IAAIC,KAAKV,MAAMZ,SAG3Bc,EAAKF,MAAMC,KAAKU,KAAK,kBAAMC,KAAKC,SAAW,MACpC,EAEPX,EAAKY,iBAMbA,SAAW,WACLZ,EAAKF,MAAMZ,MAAQc,EAAKF,MAAMX,WAChCa,EAAKK,SACH,CACElB,UAAWa,EAAKF,MAAMZ,OAExB,WACEoB,QAAQC,IAAIC,KAAKV,MAAMX,aAI7Ba,EAAKF,MAAMC,KAAKc,QAAQ,SAAAX,GACtBA,EAAKE,MAAQ,IAEfU,MAAK,yCAAAC,OAA0Cf,EAAKF,MAAMZ,QAC1Dc,EAAKK,SAAS,CACZnB,MAAO,6EAIF,IAAA8B,EAAAR,KACP,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkC,EAAD,CAAQ/B,MAAOsB,KAAKV,MAAMZ,MAAOC,UAAWqB,KAAKV,MAAMX,YACvDN,EAAAC,EAAAC,cAAA,gGAIAF,EAAAC,EAAAC,cAACmC,EAAD,CAASlC,UAAU,WAChBwB,KAAKV,MAAMC,KAAKoB,IAAI,SAAApB,GAAI,OACvBlB,EAAAC,EAAAC,cAACqC,EAAD,CACE5B,GAAIO,EAAKP,GACT6B,IAAKtB,EAAKP,GACVE,KAAMK,EAAKL,KACXE,MAAOG,EAAKH,MACZL,YAAayB,EAAKzB,yBA/Dd+B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a2d588c4.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = props => (\n  <div className=\"App-header bg-danger\">\n    Avengers Memory Game\n    <div className=\"title\">{props.children}</div>\n    <div className=\"scores\">\n      Score: {props.score} | Highscore: {props.highScore}\n    </div>\n  </div>\n);\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\n\nfunction Heroes(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img\n          onClick={() => props.handleClick(props.id)}\n          alt={props.name}\n          src={props.image}\n        />\n      </div>\n      <div className=\"content\">\n        <strong>{props.name}</strong>\n      </div>\n    </div>\n  );\n}\n\nexport default Heroes;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/header\";\nimport Data from \"./data.json\";\nimport Wrapper from \"./components/Wrapper\";\nimport Heroes from \"./components/Heroes\";\n\nclass App extends Component {\n  state = {\n    Data,\n    score: 0,\n    highScore: 0\n  };\n  handleClick = id => {\n    this.state.Data.find((hero, i) => {\n      if (hero.id === id) {\n        if (Data[i].count === 0) {\n          Data[i].count += 1;\n          this.setState(\n            {\n              score: this.state.score + 1\n            },\n            function() {\n              console.log(this.state.score);\n            }\n          );\n          this.state.Data.sort(() => Math.random() - 0.5);\n          return true;\n        } else {\n          this.gameOver();\n        }\n      }\n    });\n  };\n\n  gameOver = () => {\n    if (this.state.score > this.state.highScore) {\n      this.setState(\n        {\n          highScore: this.state.score\n        },\n        function() {\n          console.log(this.state.highScore);\n        }\n      );\n    }\n    this.state.Data.forEach(hero => {\n      hero.count = 0;\n    });\n    alert(`Game Over! Please try again. \\nScore: ${this.state.score}`);\n    this.setState({\n      score: 0\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header score={this.state.score} highScore={this.state.highScore} />\n        <p>\n          Click on a comic book cover to earn a point. Click the same one twice\n          and you lose!\n        </p>\n        <Wrapper className=\"wrapper\">\n          {this.state.Data.map(Data => (\n            <Heroes\n              id={Data.id}\n              key={Data.id}\n              name={Data.name}\n              image={Data.image}\n              handleClick={this.handleClick}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}